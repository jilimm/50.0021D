module mojo_top (
//pressing buttons will make the LED lights light up
    input clk,              // 50MHz clock
    input rst,            // reset button (active low)
    //output high2,
    //output high1,
    //output high3,
    //output low1,
    //output low2,
    //input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,       // AVR RX buffer full
    output led[8],
    input bish,
    input bash,
    input shi,
    output io_led[3][8],
    input io_dip[3][8]
  ) {
  
  //LED[ctr][b]
  //ctr==number of rows
  //ctr==> row to be active 
  //if active connect high to be high1
  //b controls the LEDs in the row to be lighted 
  //b will correspond to the 
  //b==the randomly generate number

  //all the highs corresponding to the row will be 'activated'
  //rand[2] is the configuration randomly generated
  //it is controlled by the 'low' wires
  
  .clk(clk) {
    .rst(rst){
    //fsm state = {WRONG, NEW, CONTINUE};
    //div is 26 (so its slow enough for you to see)
    //testing cricuit is only 3 rows (
      counter ctr(#DIV(20),#SIZE(2));
      main myBishiBashi;
      
    //ctr value corresponds to a (row chosen)
    }
    //pn_gen pn_gen;
  }
   
  always{
  
    //test the buttons 
    myBishiBashi.bish = bish;
    myBishiBashi.bash = bash;
    myBishiBashi.shi = shi;
    
    led[0] = myBishiBashi.out[0];
    led[1] = myBishiBashi.out[1];
    led[2] = myBishiBashi.out[2];
    led[7:3] = 4b0;
    
     io_led = 3x{{8h00}};    // turn LEDs off
     io_led[2][7] = io_dip[2][7];
    
    
  
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
  }
}