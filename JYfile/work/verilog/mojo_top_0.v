/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    output reg high1,
    output reg high2,
    output reg high3,
    output reg low1,
    output reg low2,
    output reg low3
  );
  
  
  
  reg rst;
  
  reg chosenClk;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [3-1:0] M_myreg_out;
  reg [1-1:0] M_myreg_en;
  reg [3-1:0] M_myreg_data;
  register_2 myreg (
    .clk(clk),
    .rst(rst),
    .en(M_myreg_en),
    .data(M_myreg_data),
    .out(M_myreg_out)
  );
  wire [3-1:0] M_clkreg_out;
  reg [1-1:0] M_clkreg_en;
  reg [3-1:0] M_clkreg_data;
  register1_3 clkreg (
    .clk(clk),
    .rst(rst),
    .en(M_clkreg_en),
    .data(M_clkreg_data),
    .out(M_clkreg_out)
  );
  wire [1-1:0] M_slowclk21_value;
  counter_4 slowclk21 (
    .clk(clk),
    .rst(rst),
    .value(M_slowclk21_value)
  );
  wire [1-1:0] M_slowclk22_value;
  counter_5 slowclk22 (
    .clk(clk),
    .rst(rst),
    .value(M_slowclk22_value)
  );
  wire [1-1:0] M_slowclk23_value;
  counter_6 slowclk23 (
    .clk(clk),
    .rst(rst),
    .value(M_slowclk23_value)
  );
  wire [1-1:0] M_slowclk24_value;
  counter_7 slowclk24 (
    .clk(clk),
    .rst(rst),
    .value(M_slowclk24_value)
  );
  wire [1-1:0] M_slowclk25_value;
  counter_8 slowclk25 (
    .clk(clk),
    .rst(rst),
    .value(M_slowclk25_value)
  );
  wire [2-1:0] M_mypropogater_rowLit;
  wire [3-1:0] M_mypropogater_numOut;
  wire [1-1:0] M_mypropogater_row1;
  wire [1-1:0] M_mypropogater_row2;
  wire [1-1:0] M_mypropogater_row3;
  reg [3-1:0] M_mypropogater_clkinput;
  reg [3-1:0] M_mypropogater_num;
  propogate_9 mypropogater (
    .clk(clk),
    .rst(rst),
    .clkinput(M_mypropogater_clkinput),
    .num(M_mypropogater_num),
    .rowLit(M_mypropogater_rowLit),
    .numOut(M_mypropogater_numOut),
    .row1(M_mypropogater_row1),
    .row2(M_mypropogater_row2),
    .row3(M_mypropogater_row3)
  );
  wire [32-1:0] M_pn_gen_num;
  reg [1-1:0] M_pn_gen_rst;
  reg [1-1:0] M_pn_gen_next;
  reg [32-1:0] M_pn_gen_seed;
  pn_gen_10 pn_gen (
    .clk(clk),
    .rst(M_pn_gen_rst),
    .next(M_pn_gen_next),
    .seed(M_pn_gen_seed),
    .num(M_pn_gen_num)
  );
  wire [32-1:0] M_clk_gen_num;
  reg [1-1:0] M_clk_gen_rst;
  reg [1-1:0] M_clk_gen_next;
  reg [32-1:0] M_clk_gen_seed;
  pn_gen_10 clk_gen (
    .clk(clk),
    .rst(M_clk_gen_rst),
    .next(M_clk_gen_next),
    .seed(M_clk_gen_seed),
    .num(M_clk_gen_num)
  );
  
  reg [31:0] M_seed_d, M_seed_q = 32'h00000001;
  reg [31:0] M_seed1_d, M_seed1_q = 32'h00000003;
  reg [2:0] M_ctr_d, M_ctr_q = 3'h1;
  
  always @* begin
    M_seed1_d = M_seed1_q;
    M_seed_d = M_seed_q;
    M_ctr_d = M_ctr_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led = 8'h00;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    led[0+2-:3] = M_pn_gen_num[0+2-:3];
    led[5+2-:3] = M_clkreg_out;
    M_ctr_d = M_ctr_q + 1'h1;
    M_pn_gen_seed = M_seed_q;
    M_myreg_data = M_pn_gen_num[0+2-:3];
    M_mypropogater_num = M_myreg_out;
    M_pn_gen_rst = rst;
    M_clk_gen_seed = M_seed1_q[0+2-:3];
    M_clkreg_data = M_clk_gen_num[0+2-:3];
    M_mypropogater_clkinput = M_clkreg_out;
    M_clk_gen_rst = rst;
    high1 = M_mypropogater_row1;
    high2 = M_mypropogater_row2;
    high3 = M_mypropogater_row3;
    low1 = M_mypropogater_numOut[0+0-:1];
    low2 = M_mypropogater_numOut[1+0-:1];
    low3 = M_mypropogater_numOut[2+0-:1];
    if (M_mypropogater_rowLit == 2'h0) begin
      M_seed1_d = M_seed1_q + 1'h1;
      M_seed_d = M_seed_q + 1'h1;
      M_pn_gen_next = 1'h1;
      M_clk_gen_next = 1'h1;
      M_myreg_en = 1'h1;
      M_clkreg_en = 1'h1;
      M_pn_gen_rst = 1'h1;
      M_clk_gen_rst = 1'h1;
      if (M_pn_gen_num[0+2-:3] == 3'h0) begin
        M_myreg_data = M_ctr_q;
      end
      if (M_clk_gen_num[0+2-:3] == 3'h7 | M_clk_gen_num[0+2-:3] == 3'h5 | M_clk_gen_num[0+2-:3] == 3'h6) begin
        M_clkreg_data = 3'h2;
      end
      
      case (M_clkreg_out)
        3'h0: begin
          chosenClk = M_slowclk21_value;
        end
        3'h1: begin
          chosenClk = M_slowclk22_value;
        end
        3'h2: begin
          chosenClk = M_slowclk23_value;
        end
        3'h3: begin
          chosenClk = M_slowclk24_value;
        end
        3'h4: begin
          chosenClk = M_slowclk25_value;
        end
      endcase
    end else begin
      M_pn_gen_next = 1'h0;
      M_clk_gen_next = 1'h0;
      M_myreg_en = 1'h0;
      M_clkreg_en = 1'h0;
      M_seed_d = M_seed_q;
    end
  end
  
  always @(posedge chosenClk) begin
    if (rst == 1'b1) begin
      M_seed_q <= 32'h00000001;
      M_seed1_q <= 32'h00000003;
      M_ctr_q <= 3'h1;
    end else begin
      M_seed_q <= M_seed_d;
      M_seed1_q <= M_seed1_d;
      M_ctr_q <= M_ctr_d;
    end
  end
  
endmodule
