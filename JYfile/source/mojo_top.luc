global ClkNumb{
  const SLOWCLK21 = 3b000;
  const SLOWCLK22= 3b001;
  const SLOWCLK23= 3b010;
  const SLOWCLK24= 3b011;
  const SLOWCLK25 = 3b100;
}

module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,       // AVR RX buffer full
    output high1,
    output high2,
    output high3,
    output low1,
    output low2,
    output low3
  ) {
  
  sig rst;                  // reset signal
  sig chosenClk;
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    .rst(rst){
      //range 20- 25
      //6 values tops (101) 
      
        register myreg;
        register1 clkreg;  
        //counter chosenclk (#SIZE(1));
        counter slowclk21(#SIZE(1),#DIV(21));
        counter slowclk22(#SIZE(1),#DIV(22));
        counter slowclk23(#SIZE(1),#DIV(23));
        counter slowclk24(#SIZE(1),#DIV(24));
        counter slowclk25(#SIZE(1),#DIV(25));   
        propogate mypropogater; 
        //random clkChoice; 
        
      }
    pn_gen pn_gen;
    pn_gen clk_gen;
    
  }
  
  .clk(chosenClk){
  .rst(rst){
      dff seed[32](#INIT(32d1)); //seed to generate random number sequence
      dff seed1[32] (#INIT(32d3)); //seed to generate clock timing
      dff ctr[3](#INIT(3b001)); //counter to generate numb seq if it fails
    }
  }
  always {
  
  //  seed.d = seed.q + 1;
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;           // not using serial port
    //hooking up leds to display number
    led[2:0] = pn_gen.num[2:0]; //display the random number generated on mojo LED
    led[7:5] = clkreg.out;
    //raising value of ctr        
    ctr.d = ctr.q + 1;
    //setting up pn_gen for the number sequence
    pn_gen.seed = seed.q;      //connect pn_gen of mojo to a seed so it can generate a number
    myreg.data = pn_gen.num[2:0];
    mypropogater.num=myreg.out; //the input to mypropogater is the output of the register
    pn_gen.rst =rst;
   
    //setting up randomizer for clock timing
    clk_gen.seed = seed1.q[2:0];
     clkreg.data = clk_gen.num[2:0];
    mypropogater.clkinput = clkreg.out;
   clk_gen.rst = rst;
    
    
     
     
    //for all the propogation
    high1 = mypropogater.row1;
    high2 = mypropogater.row2;
    high3 = mypropogater.row3;
    low1 = mypropogater.numOut[0];
    low2 = mypropogater.numOut[1];
    low3 = mypropogater.numOut[2];

    if (mypropogater.rowLit==2b00){
       seed1.d = seed1.q + 1;
       seed.d = seed.q + 1; //change my seed so my random number generated changes too
       pn_gen.next=1;
      clk_gen.next=1;
       myreg.en=1; //record value of random sequence
      clkreg.en=1;
       pn_gen.rst=1;  //number generated will be output-ed
       clk_gen.rst=1;
     
       if (pn_gen.num[2:0]==3b000){
             myreg.data = ctr.q; //when the random number is 0 output the counter value 
    }    
       if (clk_gen.num[2:0]==3b111|clk_gen.num[2:0]==3b101|clk_gen.num[2:0]==3b110){    
        clkreg.data = 3b010; //pn_gen choose invalid clk timing I defuault it back to 23 
    }    
          
          case (clkreg.out){
      ClkNumb.SLOWCLK21:
       chosenClk= slowclk21.value;
      ClkNumb.SLOWCLK22:
      chosenClk = slowclk22.value;
      ClkNumb.SLOWCLK23:
      chosenClk = slowclk23.value;
      ClkNumb.SLOWCLK24:
      chosenClk= slowclk24.value;
      ClkNumb.SLOWCLK25:
      chosenClk = slowclk25.value;
    }       
}
    else{
       pn_gen.next=0;
      clk_gen.next=0;
       myreg.en=0;
      clkreg.en=0;
      seed.d = seed.q;
    }
  }
   
}